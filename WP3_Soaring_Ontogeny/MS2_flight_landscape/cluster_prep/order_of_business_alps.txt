#from terminal on local system: (make sure to be on MPI internet, use VPN)
#the file with all data (no missing values)

#copy over the dataset-----------------------------------------------------------------
scp /home/enourani/ownCloud/Work/Projects/GE_ontogeny_of_soaring/R_files/inla_preds_for_cluster/alps_alt_50_20_min_48_ind_wmissing_Jun_temp.rds enourani@raven.mpcdf.mpg.de:/raven/u/enourani/slrm_jobs/

#copy over info for backtransforming the week values
scp /home/enourani/ownCloud/Work/Projects/GE_ontogeny_of_soaring/R_files/inla_preds_for_cluster/weeks_since_z_info.rds enourani@raven.mpcdf.mpg.de:/raven/u/enourani/GE_ALPS/

#make sure paradiso license is on the cluster
#scp /home/enourani/ownCloud/Work/cluster_computing/GE_inla_static/pardiso.lic enourani@raven.mpcdf.mpg.de:/raven/u/enourani/

#ssh to cluster-----------------------------------------------------------------
# if not on MPI network: 
ssh enourani@gate.mpcdf.mpg.de
ssh raven.mpcdf.mpg.de

#if on MPI network:
ssh enourani@raven.mpcdf.mpg.de


#load R-----------------------------------------------------------------
module purge
module load gcc/10 R/4.2 gdal gsl/2.4

#open R in new screen
screen -S inlaGE
R

#to detach screen anytime, ctr+A,D
#to go back to the scree: screen -d -r myScreenName
#list of screens: screen -list
#kill screen: screen -S myScreenName -X quit 

######in R

setwd("GE_ALPS")

library(tidyverse)
library(INLA)
inla.setOption(pardiso.license = "pardiso.lic")

#STEP 1: open data and assign variables -----------------------------------------------------------------

weeks <- c(1, 2, 3, 4, 24, 48, 104) 

alps_data <- readRDS("alps_alt_50_20_min_48_ind_wmissing_Jun_temp.rds") %>% 
as.data.frame()

weeks_z_info <- readRDS("weeks_since_z_info.rds")

#define variables and formula
formulaM <- used ~ -1 + 
  dem_100_z * weeks_since_emig_n_z +
  TRI_100_z * weeks_since_emig_n_z + 
  month_temp_z +
  f(stratum, model = "iid", 
    hyper = list(theta = list(initial = log(1e-6),fixed = T))) +
  f(ind1, dem_100_z, model = "iid",
    hyper=list(theta=list(initial=log(1),fixed=F,prior="pc.prec",param=c(3,0.05)))) + 
  f(ind2, TRI_100_z,  model = "iid",
    hyper=list(theta=list(initial=log(1),fixed=F,prior="pc.prec",param=c(3,0.05))))

mean.beta <- 0
prec.beta <- 1e-4 

#STEP 2: build one model per week ------------------------------------------------------------------------

lapply(weeks, function(x){
  
  #create the new data
  new_data <- alps_data %>%
  mutate(weeks_since_emig_n = replace_na(weeks_since_emig_n, x)) %>%
    rowwise() %>%
    mutate(weeks_since_emig_n_z = (weeks_since_emig_n - weeks_z_info$mean_wks)/weeks_z_info$sd_wks) #estimate z-score based on original data


#try with a sample
#strata <- sample(unique(new_data$stratum), 100)
#new_data <- new_data %>% 
#filter(stratum %in% strata)

  #run model
  
  (b <- Sys.time())
  M_pred <- inla(formulaM, family = "Poisson", 
               control.fixed = list(
                 mean = mean.beta,
                 prec = list(default = prec.beta)),
               data = new_data, 
               num.threads = 20,
               control.predictor = list(compute = TRUE), #this means that NA values will be predicted.
               control.compute = list(openmp.strategy = "huge", config = TRUE, cpo = F), #deactivate cpo to save computing power
               inla.mode="experimental")
Sys.time() - b


  #save results
  
  # extract info for coefficient plots
  
  # posterior means of coefficients
  graph <- as.data.frame(summary(M_pred)$fixed)
  colnames(graph)[which(colnames(graph)%in%c("0.025quant","0.975quant"))]<-c("Lower","Upper")
  colnames(graph)[which(colnames(graph)%in%c("0.05quant","0.95quant"))]<-c("Lower","Upper")
  colnames(graph)[which(colnames(graph)%in%c("mean"))]<-c("Estimate")

  graph$Factor <- rownames(graph)
  
  saveRDS(graph, file = paste0("graph_M_pred_wk", x, ".rds"))
  
  #extract info to make prediction plots
  
  used_na <- which(is.na(new_data$used))
  
  #extract information for rows that had NAs as response variables
  preds <- data.frame(location.long = new_data[is.na(new_data$used) ,"location.long"],
                      location.lat = new_data[is.na(new_data$used) ,"location.lat"],
                      dem_100_z = new_data[is.na(new_data$used) ,"dem_100_z"],
                      TRI_100_z = new_data[is.na(new_data$used) ,"TRI_100_z"],
                      month_temp_z = new_data[is.na(new_data$used) ,"month_temp_z"],
                      weeks_since_emig_n_z = new_data[is.na(new_data$used) ,"weeks_since_emig_n_z"],
                      preds = M_pred$summary.fitted.values[used_na,"mean"], 
                      preds_sd = M_pred$summary.fitted.values[used_na,"sd"]) %>%  
    mutate(prob_pres = exp(preds)/(1+exp(preds))) #this should be between 0-1
  
  
  saveRDS(preds, file = paste0("preds_M_pred_wk", x, ".rds"))
  
})


#STEP 3: copy results over to local system -------------------------------------------------------------------

#on cluster: remove the data files
#move results to a different folder
#rm GE_ALPS/alps_alt_50_20_min_48_ind_wmissing_Jun_temp.rds
#rm GE_ALPS/weeks_since_z_info.rds


#from local terminal

scp -r enourani@raven.mpcdf.mpg.de:/raven/u/enourani/GE_ALPS/ /home/enourani/ownCloud/Work/cluster_computing/GE_inla_static/results_alps/alps_preds_Jan23


