#Scripts for modeling the energy landscape for golden eagles past dispersal
#data contains missing values which will allow me to make predictions to plot the interaction
#update on April 12th to include seasonality and hourly points
#update on April 18th: only include seasonality for dem

#From terminal on local system: (make sure to be on MPI internet, use VPN)
#The file with all data (no missing values)

scp /home/enourani/ownCloud/Work/Projects/GE_ontogeny_of_soaring/R_files/new_data_ssf_inla_preds.rds enourani@raven.mpcdf.mpg.de:/raven/u/enourani/GE_INLA/
  
#copy over paradiso license
scp /home/enourani/ownCloud/Work/cluster_computing/GE_inla_static/pardiso.lic enourani@raven.mpcdf.mpg.de:/raven/u/enourani/
  
#ssh to cluster
  
# if not on MPI network: 
ssh gate.mpcdf.mpg.de
ssh enourani@raven.mpcdf.mpg.de


#if on MPI network:
ssh enourani@raven.mpcdf.mpg.de


#load R
module purge
module load gcc/10 R/4.2 gdal gsl/2.4

#open R in new screen
screen -S inlaGE
R

#to detach screen anytime, ctr+A,D
#to go back to the scree: screen -r myScreenName
#list of screens: screen -list
#kill screen: screen -S myScreenName -X quit 

######in R

setwd("GE_INLA")

library(dplyr)
library(INLA)
inla.setOption(pardiso.license = "pardiso.lic")

#open file
new_data <- readRDS("new_data_ssf_inla_preds.rds")

#-----------------------------------------------------------------------------------------------
# STEP 1: MODEL WITH NO MISSING VALUES.

#define variables and formula
#decided to go with seasonality only for dem
F_full <- used ~ -1 +
  dem_100_z * step_length_z * weeks_since_emig_z +
  TRI_100_z * step_length_z * weeks_since_emig_z +
  ridge_100_z * step_length_z * weeks_since_emig_z +
  f(stratum, model = "iid", 
    hyper = list(theta = list(initial = log(1e-6),fixed = T))) +
  f(ind1, dem_100_z, model = "iid",
    hyper = list(theta=list(initial = log(1), prior = "pc.prec", param = c(3,0.05))),
    group = month, control.group = list(model = "ar1", cyclic = T, scale.model = TRUE)) +
  f(ind2, TRI_100_z, model = "iid",
    hyper=list(theta=list(initial=log(1),fixed=F,prior="pc.prec",param=c(3,0.05)))) +
  f(ind3, ridge_100_z, model = "iid",
    hyper=list(theta=list(initial=log(1),fixed=F,prior="pc.prec",param=c(3,0.05))))


mean.beta <- 0
prec.beta <- 1e-4 

#run model
(b <- Sys.time())
M_main <-  inla(F_full, family = "Poisson",
                 control.fixed = list(
                   mean = mean.beta,
                   prec = list(default = prec.beta)),
                 data = new_data,
                 num.threads = 20, 
                 control.predictor = list(compute = TRUE), #this means that NA values will be predicted. when link is 1: predictions range from 0.5 to 1
                 control.compute = list(openmp.strategy =  "pardiso", config = TRUE, cpo = T), #deactivate cpo to save computing power
                 control.inla = list(strategy = "adaptive", int.strategy = "eb"),
                 inla.mode="experimental", verbose = F)
Sys.time() -b #15min

#extract model vlidation results
eval <- data.frame(CPO = mean(M_main$cpo$cpo, na.rm = T),
                   Mlik = as.numeric(M_main$mlik[,1][2])) 

saveRDS(eval, file = "eval_M_main100_hrly.rds")

# extract info for coefficient plots

# posterior means of coefficients
graph <- as.data.frame(summary(M_main)$fixed)
colnames(graph)[which(colnames(graph)%in%c("0.025quant","0.975quant"))]<-c("Lower","Upper")
colnames(graph)[which(colnames(graph)%in%c("0.05quant","0.95quant"))]<-c("Lower","Upper")
colnames(graph)[which(colnames(graph)%in%c("mean"))]<-c("Estimate")

graph$Factor <- rownames(graph)

saveRDS(graph, file = "graph_M_main100_hrly.rds")

#-----------------------------------------------------------------------------------------------
# STEP 2: EXTRACT & SAVE PREDICTIONS

#extract predictions for interaction terms
used_na <- which(is.na(new_data$used))

preds <- new_data %>% 
slice(used_na) %>% #extract information for rows that had NAs as response variables
mutate(preds = M_main$summary.fitted.values[used_na,"mean"]) %>% 
  mutate(prob_pres = exp(preds)/(1 + exp(preds))) #this should be between 0-1

saveRDS(preds, file = "preds_M_main100_hrly.rds")


#extract info for ind- and month-specific variation

summ_rndm <- M_main$summary.random

saveRDS(summ_rndm, file = "rnd_coeff_M_main100_hrly.rds")


#-----------------------------------------------------------------------------------------------
# STEP 3: TRANSFER FILES TO LOCAL MACHINE

## copy files back to local machine.. from local terminal
scp -r enourani@raven.mpcdf.mpg.de:/raven/u/enourani/GE_INLA/*M_main100_hrly.rds /home/enourani/ownCloud/Work/cluster_computing/GE_inla_static/results/Apr2523_seasonality_100

############ tryin to fix the preds again
#run model
(b <- Sys.time())
M_main <-  inla(F_full, family = "Poisson",
                 control.fixed = list(
                   mean = mean.beta,
                   prec = list(default = prec.beta)),
                 data = new_data,
                 num.threads = 20, 
                 control.predictor = list(compute = TRUE))#, #this means that NA values will be predicted. when link is 1: predictions range from 0.5 to 1
                 control.compute = list(openmp.strategy =  "pardiso", config = TRUE, cpo = T)) #deactivate cpo to save computing power
                 #control.inla = list(strategy = "adaptive", int.strategy = "eb"),
                 #inla.mode = "experimental", verbose = F)
Sys.time() -b #15min


